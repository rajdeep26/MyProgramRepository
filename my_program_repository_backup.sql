-- MySQL dump 10.13  Distrib 5.1.36, for Win32 (ia32)
--
-- Host: localhost    Database: my_program_repository
-- ------------------------------------------------------
-- Server version	5.1.36-community-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `programs`
--

DROP TABLE IF EXISTS `programs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `programs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `program_title` varchar(255) NOT NULL,
  `program_language` varchar(30) NOT NULL,
  `program` mediumtext NOT NULL,
  `date` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `programs`
--

LOCK TABLES `programs` WRITE;
/*!40000 ALTER TABLE `programs` DISABLE KEYS */;
INSERT INTO `programs` VALUES (1,'Hello World','C','#include<stdio.h>\r\n#include<conio.h>\r\nvoid main()\r\n{\r\n  printf(\"Hello World!!\");\r\n  getch(); \r\n}',1372876208),(2,'Simple Linklist Program','C','#include<stdio.h>\r\n#include<conio.h>\r\n#include<alloc.h>\r\n\r\nstruct node\r\n{\r\nint data;\r\nstruct node *link;\r\n};\r\n\r\ntypedef struct node node;\r\nnode *first=NULL,*last=NULL;\r\n\r\nvoid create();\r\nvoid display();\r\nvoid search();\r\nvoid del();\r\nvoid insert();\r\n\r\nvoid main()\r\n{\r\nint x;\r\nclrscr();\r\ndo\r\n{\r\nprintf(\"\\n\");\r\nprintf(\"\\n ---------MENU-------- \");\r\nprintf(\"\\n|     1:ADD ENRTY     |\");\r\nprintf(\"\\n|     2:DISPLAY       |\");\r\nprintf(\"\\n|     3:SEARCH        |\");\r\nprintf(\"\\n|     4:INSERT        |\");\r\nprintf(\"\\n|     5:DELETE        |\");\r\nprintf(\"\\n|     6:EXIT          |\");\r\nprintf(\"\\n --------------------- \");\r\nprintf(\"\\nENTER YOUR CHOICE : \");\r\nscanf(\"%d\",&x);\r\n  switch(x)\r\n{\r\ncase 1:create();\r\n       break;\r\ncase 2:display();\r\n       break;\r\ncase 3:search();\r\n       break;\r\ncase 4:insert();\r\n       break;\r\ncase 5:del();\r\n       break;\r\n}\r\n}\r\nwhile(x!=6);\r\n\r\n}\r\n\r\n void create()\r\n{\r\n  node *node1=malloc(sizeof(node1));\r\n  printf(\"ENTER THE DATA : \");\r\n  scanf(\"%d\",&node1->data);\r\n  node1->link=NULL;\r\n  if(first==NULL)\r\n     first=node1;\r\n  else\r\n     last->link=node1;\r\n  last=node1;\r\n}\r\n\r\nvoid display()\r\n{\r\n int i,j,count=0;\r\n clrscr();\r\n  if(first==NULL)\r\n      printf(\"\\n\\n\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\\n\\n\");\r\n   else\r\n {\r\n   node *temp=first;\r\n   printf(\"THE LINKED LIST IS : \");\r\n   j=1;\r\n    while(temp!=NULL)\r\n   {\r\n       if(count>=8)\r\n       { i=13;\r\n	 if(count==8)  j=1;\r\n       }\r\n    else\r\n       if(count>=4)\r\n      { i=8;\r\n       if(count==4)  j=1;\r\n      }\r\n    else\r\n       i=3;\r\n  gotoxy(j,i);\r\n  printf(\" ---------------\");\r\n  i++;\r\n  gotoxy(j,i);\r\n  if(temp->link==NULL)\r\n  printf(\"|%5d |  NULL  |\",temp->data,temp->link);\r\n  else\r\n  printf(\"|%5d |%7u | ->\",temp->data,temp->link);\r\n  i++;\r\n  gotoxy(j,i);\r\n  printf(\" ---------------\");   i++;\r\n  gotoxy(j,i);\r\n  printf(\"   add=%u\",temp);\r\n  temp=temp->link;\r\n  j=j+20;\r\n  count++;\r\n  }\r\n  printf(\"\\n\\nPosition of the \\\"POINTERES\\\"\");\r\n  printf(\"\\nFirst=%u  Last=%u \",first,last);\r\n}\r\n}\r\n\r\nvoid search()\r\n{\r\nclrscr();\r\nif(first==NULL)\r\nprintf(\"\\n\\n\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\\n\\n\");\r\nelse\r\n{\r\n node *temp=first;\r\n int element,pos=1;\r\n printf(\"\\n\\nENTER THE ELEMENT TO BE SEARCHED : \");\r\n scanf(\"%d\",&element);\r\n while((temp!=last)&&(temp->data!=element))\r\n {\r\n   temp=temp->link;\r\n   pos++;\r\n }\r\n if(temp->data==element)\r\n printf(\"\\n\\n\\nTHE ELEMENT IS PRESENT AT POSITION %d\",pos);\r\n else\r\n printf(\"\\n\\n\\n\\t\\t\\tSORRY!!!\\n\\t\\tTHE ELEMENT IS ABSENT!!\");\r\n}\r\n}\r\n\r\n  void insert()\r\n{\r\n clrscr();\r\n if(first==NULL)\r\n  printf(\"\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\");\r\n else\r\n {\r\n    node *node1,*temp;\r\n    int pos,i,c=0;\r\n    node1=malloc(sizeof(node));\r\n    printf(\"\\nENTER THE DATA : \");\r\n    scanf(\"%d\",&node1->data);\r\n    node1->link=NULL;\r\n    printf(\"\\nENTER THE POSITION : \");\r\n    scanf(\"%d\",&pos);\r\n    temp=first;\r\n     while(temp!=NULL)\r\n   {\r\n     temp=temp->link;\r\n     c=c+1;\r\n   }\r\n     if((pos<1)||(pos>c+1))\r\n       printf(\"\\n\\n\\n\\t\\t\\tINVALID POSITION!!!\");\r\n    else\r\n    {   temp=first;\r\n	    if(pos==1)\r\n	  {\r\n	    node1->link=first;\r\n	    first=node1;\r\n	  }\r\n    else\r\n       if(pos==c+1)\r\n     {\r\n       last->link=node1;\r\n       last=node1;\r\n     }\r\n    else\r\n	  {\r\n	  for(i=1;i<=pos-2;i++)\r\n	  temp=temp->link;\r\n	  node1->link=temp->link;\r\n	  temp->link=node1;\r\n	  }\r\n   }\r\n }\r\n}\r\n\r\n\r\n   void del()\r\n{\r\n  node *ptr=first,*temp;\r\n  int pos,i,c=0,choice,item;\r\n  clrscr();\r\n  if(first==NULL)\r\n     printf(\"\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\");\r\n  else\r\n    {\r\n    printf(\"\\nDELETION USING......\");\r\n    printf(\"\\n 1:POSITION\");\r\n    printf(\"\\n 2:ELEMENT VALUE\");\r\n    printf(\"\\n 3:DELETE ALL\");\r\n    printf(\"\\nENTER YOUR CHOICE : \");\r\n    scanf(\"%d\",&choice);\r\n    switch(choice)\r\n    {\r\n    case 1:printf(\"\\nENTER THE POSITION : \");\r\n	   scanf(\"%d\",&pos);\r\n	   temp=first;\r\n	      while(temp!=NULL)\r\n	    {\r\n		temp=temp->link;\r\n		c=c+1;\r\n		\r\n	    }\r\n	      if((pos>0)&&(pos<=c))\r\n	    {\r\n		 if(pos==1)\r\n	      {\r\n		  first=first->link;\r\n		  free(ptr);\r\n	      }\r\n		else\r\n		if(pos==c)\r\n	      {\r\n		   while(ptr!=last)\r\n		 {\r\n		     temp=ptr;\r\n		     ptr=ptr->link;\r\n		 }\r\n\r\n	       temp->link=NULL;\r\n	       last=temp;\r\n	     }\r\n	    else\r\n	   {\r\n		for(i=1;i<=pos-2;i++)\r\n		ptr=ptr->link;\r\n		temp=ptr->link;\r\n		ptr->link=temp->link;\r\n		free(temp);\r\n	   }\r\n	 }\r\n	 else\r\n	 printf(\"\\n\\n\\n\\t\\t\\tINVALID POSITION!!!\");\r\n	 break;\r\n\r\n     case 2:printf(\"\\nENTER THE ELEMENT TO BE DELETED : \");\r\n	    scanf(\"%d\",&item);\r\n		if(item==first->data)\r\n		{\r\n		  printf(\"\\nELEMENT IS FOUND AND DELETED!!!\");\r\n		  first=first->link;\r\n		  break;\r\n		}\r\n		else\r\n		  if(item==last->data)\r\n		  {\r\n		   printf(\"\\nELEMENT IS FOUND AND DELETED!!!\");\r\n		   while(ptr->link!=last)\r\n		   ptr=ptr->link;\r\n		   last=ptr;\r\n		   ptr->link=NULL;\r\n		  }\r\n	      else\r\n		{\r\n		  while((ptr!=NULL)&&(ptr->data!=item))\r\n		  {\r\n		   temp=ptr;\r\n		   ptr=ptr->link;\r\n		  }\r\n		  if(ptr->data==item)\r\n		  {\r\n		  temp->link=ptr->link;\r\n		  printf(\"\\nELEMENT IS FOUND AND DELETED\");\r\n		  }\r\n		  else\r\n		  printf(\"\\nELEMENT NOT FOUND!!!\");\r\n		}\r\n		break;\r\n	 case 3:first=last=NULL;\r\n		break;\r\n      }\r\n  }\r\n}',1372876263),(3,'Doubly Linklist Program','C','#include<stdio.h>\r\n#include<conio.h>\r\n#include<alloc.h>\r\n\r\nstruct node\r\n{\r\nint data;\r\nstruct node *prev;\r\nstruct node *next;\r\n};\r\n\r\ntypedef struct node node;\r\nnode *first=NULL,*last=NULL;\r\n\r\nvoid create();\r\nvoid display();\r\nvoid search();\r\nvoid del();\r\nvoid insert();\r\n\r\nvoid main()\r\n{\r\nint x;\r\nclrscr();\r\ndo\r\n{\r\nprintf(\"\\n\");\r\nprintf(\"\\n ---------MENU-------- \");\r\nprintf(\"\\n|     1:ADD ENRTY     |\");\r\nprintf(\"\\n|     2:DISPLAY       |\");\r\nprintf(\"\\n|     3:SEARCH        |\");\r\nprintf(\"\\n|     4:INSERT        |\");\r\nprintf(\"\\n|     5:DELETE        |\");\r\nprintf(\"\\n|     6:EXIT          |\");\r\nprintf(\"\\n --------------------- \");\r\nprintf(\"\\nENTER YOUR CHOICE : \");\r\nscanf(\"%d\",&x);\r\n  switch(x)\r\n{\r\ncase 1:create();\r\n       break;\r\ncase 2:display();\r\n       break;\r\ncase 3:search();\r\n       break;\r\ncase 4:insert();\r\n       break;\r\ncase 5:del();\r\n       break;\r\n}\r\n}\r\nwhile(x!=6);\r\n\r\n}\r\n\r\n void create()\r\n{\r\n  node *node1=malloc(sizeof(node1));\r\n  printf(\"ENTER THE DATA : \");\r\n  scanf(\"%d\",&node1->data);\r\n  node1->next=NULL;\r\n  node1->prev=NULL;\r\n  if(first==NULL)\r\n  {\r\n   first=node1;\r\n   node1->next=first;\r\n   node1->prev=first;\r\n   last=node1;\r\n  }\r\n  else\r\n  {\r\n  last->next=node1;\r\n  node1->prev=last;\r\n  node1->next=first;\r\n  last=node1;\r\n  first->prev=last;\r\n  }\r\n}\r\n\r\nvoid display()\r\n{\r\n int i,j,count=0;\r\n clrscr();\r\n  if(first==NULL)\r\n      printf(\"\\n\\n\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\\n\\n\");\r\n   else\r\n {\r\n   node *temp=first;\r\n   printf(\"THE CIRCULAR LINKED LIST IS : \");\r\n   j=1;\r\n    do\r\n   {\r\n       if(count>=6)\r\n       { i=13;\r\n	 if(count==6)  j=1;\r\n       }\r\n    else\r\n       if(count>=3)\r\n      { i=8;\r\n       if(count==3)  j=1;\r\n       gotoxy(j-2,i+1);\r\n       printf(\"->\");\r\n      }\r\n    else\r\n    {   i=3;\r\n      if(count!=0)\r\n      {\r\n       gotoxy(j-2,i+1);\r\n       printf(\"->\");\r\n       }\r\n    }\r\n\r\n  gotoxy(j,i);\r\n  printf(\" ----------------------\");\r\n  i++;\r\n  gotoxy(j,i);\r\n  printf(\"|%6u |%5d |%6u | \",temp->prev,temp->data,temp->next);\r\n  i++;\r\n  gotoxy(j,i);\r\n  printf(\" ----------------------\");   i++;\r\n  gotoxy(j,i);\r\n  printf(\"   add=%u\",temp);\r\n  temp=temp->next;\r\n  j=j+26;\r\n  count++;\r\n  }\r\n  while(temp!=first);\r\n  printf(\"\\n\\nPosition of the \\\"POINTERES\\\"\");\r\n  printf(\"\\nFirst=%u  Last=%u \",first,last);\r\n}\r\n}\r\n\r\nvoid search()\r\n{\r\nclrscr();\r\nif(first==NULL)\r\nprintf(\"\\n\\n\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\\n\\n\");\r\nelse\r\n{\r\n node *temp=first;\r\n int element,pos=1;\r\n printf(\"\\n\\nENTER THE ELEMENT TO BE SEARCHED : \");\r\n scanf(\"%d\",&element);\r\n while((temp!=last)&&(temp->data!=element))\r\n {\r\n   temp=temp->next;\r\n   pos++;\r\n }\r\n if(temp->data==element)\r\n printf(\"\\n\\n\\nTHE ELEMENT IS PRESENT AT POSITION %d\",pos);\r\n else\r\n printf(\"\\n\\n\\n\\t\\t\\tSORRY!!!\\n\\t\\tTHE ELEMENT IS ABSENT!!\");\r\n}\r\n}\r\n\r\n  void insert()\r\n{\r\n clrscr();\r\n if(first==NULL)\r\n  printf(\"\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\");\r\n else\r\n {\r\n    node *node1,*temp,*nextnode;\r\n    int pos,i,c=0;\r\n    node1=malloc(sizeof(node));\r\n    printf(\"\\nENTER THE DATA : \");\r\n    scanf(\"%d\",&node1->data);\r\n    node1->next=NULL;\r\n    node1->prev=NULL;\r\n    printf(\"\\nENTER THE POSITION : \");\r\n    scanf(\"%d\",&pos);\r\n    temp=first;\r\n     while(temp!=last)\r\n   {\r\n     temp=temp->next;\r\n     c=c+1;\r\n   }\r\n    c++;\r\n     if((pos<1)||(pos>c+1))\r\n       printf(\"\\n\\n\\n\\t\\t\\tINVALID POSITION!!!\");\r\n    else\r\n    {   temp=first;\r\n	    if(pos==1)\r\n	  {\r\n	    first->prev=node1;\r\n	    node1->next=first;\r\n	    node1->prev=last;\r\n	    first=node1;\r\n	    last->next=first;\r\n	    printf(\"\\nNODE INSERTED.\");\r\n	  }\r\n    else\r\n       if(pos==c+1)\r\n     {\r\n       last->next=node1;\r\n       node1->prev=last;\r\n       node1->next=first;\r\n       last=node1;\r\n       first->prev=last;\r\n       printf(\"\\nNODE INSERTED.\");\r\n     }\r\n    else\r\n	  {\r\n	  for(i=1;i<=pos-2;i++)\r\n	  temp=temp->next;\r\n	  nextnode=temp->next;\r\n	  node1->prev=temp;\r\n	  node1->next=nextnode;\r\n	  temp->next=node1;\r\n	  nextnode->prev=node1;\r\n	  printf(\"\\nNODE INSERTED.\");\r\n	  }\r\n   }\r\n }\r\n}\r\n\r\n\r\n   void del()\r\n{\r\n  node *ptr=first,*temp,*nextnode;\r\n  int pos,i,c=0,choice,item;\r\n  clrscr();\r\n  if(first==NULL)\r\n     printf(\"\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\");\r\n  else\r\n    {\r\n    printf(\"\\nDELETION USING......\\n\");\r\n    printf(\"\\n 1:POSITION\");\r\n    printf(\"\\n 2:ELEMENT VALUE\");\r\n    printf(\"\\n 3:DELETE ALL\");\r\n    printf(\"\\nENTER YOUR CHOICE : \");\r\n    scanf(\"%d\",&choice);\r\n    switch(choice)\r\n    {\r\n    case 1:printf(\"\\nENTER THE POSITION : \");\r\n	   scanf(\"%d\",&pos);\r\n	   temp=first;\r\n	      while(temp!=last)\r\n	    {\r\n		temp=temp->next;\r\n		c=c+1;\r\n	    }\r\n	      c++;\r\n	      if((pos>0)&&(pos<=c))\r\n	    {\r\n		 if(pos==1)\r\n	      {\r\n		  first=first->next;\r\n		  first->prev=last;\r\n		  last->next=first;\r\n		  free(ptr);\r\n	      }\r\n		else\r\n		if(pos==c)\r\n	      {\r\n		   while(ptr!=last)\r\n		 {\r\n		     temp=ptr;\r\n		     ptr=ptr->next;\r\n		 }\r\n\r\n	       temp->next=first;\r\n	       last=temp;\r\n	       first->prev=last;\r\n	     }\r\n	    else\r\n	   {\r\n		for(i=1;i<=pos-2;i++)\r\n		ptr=ptr->next;\r\n		temp=ptr->next;\r\n		ptr->next=temp->next;\r\n		nextnode=temp->next;\r\n		nextnode->prev=ptr;\r\n		free(temp);\r\n	   }\r\n	 }\r\n	 else\r\n	 printf(\"\\n\\n\\n\\t\\t\\tINVALID POSITION!!!\");\r\n	 break;\r\n\r\n     case 2:printf(\"\\nENTER THE ELEMENT TO BE DELETED : \");\r\n	    scanf(\"%d\",&item);\r\n		if(item==first->data)\r\n		{\r\n		  printf(\"\\nELEMENT IS FOUND AND DELETED!!!\");\r\n		  first=first->next;\r\n		  last->next=first;\r\n		  break;\r\n		}\r\n		else\r\n		  if(item==last->data)\r\n		  {\r\n		   printf(\"\\nELEMENT IS FOUND AND DELETED!!!\");\r\n		   while(ptr->next!=last)\r\n		   ptr=ptr->next;\r\n		   last=ptr;\r\n		   ptr->next=first;\r\n		  }\r\n	      else\r\n		{\r\n		  while((ptr!=last)&&(ptr->data!=item))\r\n		  {\r\n		   temp=ptr;\r\n		   ptr=ptr->next;\r\n		  }\r\n		  if(ptr->data==item)\r\n		  {\r\n		  temp->next=ptr->next;\r\n		  printf(\"\\nELEMENT IS FOUND AND DELETED\");\r\n		  }\r\n		  else\r\n		  printf(\"\\nELEMENT NOT FOUND!!!\");\r\n		}\r\n		break;\r\n	 case 3:first=last=NULL;\r\n		break;\r\n      }\r\n  }\r\n}',1372876300),(4,'Circular Linklist Program','C','#include<stdio.h>\r\n#include<conio.h>\r\n#include<alloc.h>\r\n\r\nstruct node\r\n{\r\nint data;\r\nstruct node *link;\r\n};\r\n\r\ntypedef struct node node;\r\nnode *first=NULL,*last=NULL;\r\n\r\nvoid create();\r\nvoid display();\r\nvoid search();\r\nvoid del();\r\nvoid insert();\r\n\r\nvoid main()\r\n{\r\nint x;\r\nclrscr();\r\ndo\r\n{\r\nprintf(\"\\n\");\r\nprintf(\"\\n ---------MENU-------- \");\r\nprintf(\"\\n|     1:ADD ENRTY     |\");\r\nprintf(\"\\n|     2:DISPLAY       |\");\r\nprintf(\"\\n|     3:SEARCH        |\");\r\nprintf(\"\\n|     4:INSERT        |\");\r\nprintf(\"\\n|     5:DELETE        |\");\r\nprintf(\"\\n|     6:EXIT          |\");\r\nprintf(\"\\n --------------------- \");\r\nprintf(\"\\nENTER YOUR CHOICE : \");\r\nscanf(\"%d\",&x);\r\n  switch(x)\r\n{\r\ncase 1:create();\r\n       break;\r\ncase 2:display();\r\n       break;\r\ncase 3:search();\r\n       break;\r\ncase 4:insert();\r\n       break;\r\ncase 5:del();\r\n       break;\r\n}\r\n}\r\nwhile(x!=6);\r\n\r\n}\r\n\r\n void create()\r\n{\r\n  node *node1=malloc(sizeof(node1));\r\n  printf(\"ENTER THE DATA : \");\r\n  scanf(\"%d\",&node1->data);\r\n  node1->link=NULL;\r\n  if(first==NULL)\r\n  {\r\n   first=node1;\r\n   node1->link=first;\r\n  }\r\n  else\r\n  {\r\n  last->link=node1;\r\n  node1->link=first;\r\n  }\r\n  last=node1;\r\n}\r\n\r\nvoid display()\r\n{\r\n int i,j,count=0;\r\n clrscr();\r\n  if(first==NULL)\r\n      printf(\"\\n\\n\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\\n\\n\");\r\n   else\r\n {\r\n   node *temp=first;\r\n   printf(\"THE CIRCULAR LINKED LIST IS : \");\r\n   j=1;\r\n    do\r\n   {\r\n       if(count>=8)\r\n       { i=13;\r\n	 if(count==8)  j=1;\r\n       }\r\n    else\r\n       if(count>=4)\r\n      { i=8;\r\n       if(count==4)  j=1;\r\n      }\r\n    else\r\n    {   i=3;\r\n      if(count!=0)\r\n      {\r\n       gotoxy(j-2,i+1);\r\n       printf(\"->\");\r\n       }\r\n    }\r\n\r\n  gotoxy(j,i);\r\n  printf(\" ---------------\");\r\n  i++;\r\n  gotoxy(j,i);\r\n  printf(\"|%5d |%7u | \",temp->data,temp->link);\r\n  i++;\r\n  gotoxy(j,i);\r\n  printf(\" ---------------\");   i++;\r\n  gotoxy(j,i);\r\n  printf(\"   add=%u\",temp);\r\n  temp=temp->link;\r\n  j=j+20;\r\n  count++;\r\n  }\r\n  while(temp!=first);\r\n}\r\n}\r\n\r\nvoid search()\r\n{\r\nclrscr();\r\nif(first==NULL)\r\nprintf(\"\\n\\n\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\\n\\n\");\r\nelse\r\n{\r\n node *temp=first;\r\n int element,pos=1;\r\n printf(\"\\n\\nENTER THE ELEMENT TO BE SEARCHED : \");\r\n scanf(\"%d\",&element);\r\n while((temp!=last)&&(temp->data!=element))\r\n {\r\n   temp=temp->link;\r\n   pos++;\r\n }\r\n if(temp->data==element)\r\n printf(\"\\n\\n\\nTHE ELEMENT IS PRESENT AT POSITION %d\",pos);\r\n else\r\n printf(\"\\n\\n\\n\\t\\t\\tSORRY!!!\\n\\t\\tTHE ELEMENT IS ABSENT!!\");\r\n}\r\n}\r\n\r\n  void insert()\r\n{\r\n clrscr();\r\n if(first==NULL)\r\n  printf(\"\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\");\r\n else\r\n {\r\n    node *node1,*temp;\r\n    int pos,i,c=0;\r\n    node1=malloc(sizeof(node));\r\n    printf(\"\\nENTER THE DATA : \");\r\n    scanf(\"%d\",&node1->data);\r\n    node1->link=NULL;\r\n    printf(\"\\nENTER THE POSITION : \");\r\n    scanf(\"%d\",&pos);\r\n    temp=first;\r\n     while(temp!=last)\r\n   {\r\n     temp=temp->link;\r\n     c=c+1;\r\n   }\r\n    c++;\r\n     if((pos<1)||(pos>c+1))\r\n       printf(\"\\n\\n\\n\\t\\t\\tINVALID POSITION!!!\");\r\n    else\r\n    {   temp=first;\r\n	    if(pos==1)\r\n	  {\r\n	    node1->link=first;\r\n	    first=node1;\r\n	    last->link=first;\r\n	  }\r\n    else\r\n       if(pos==c+1)\r\n     {\r\n       last->link=node1;\r\n       node1->link=first;\r\n       last=node1;\r\n     }\r\n    else\r\n	  {\r\n	  for(i=1;i<=pos-2;i++)\r\n	  temp=temp->link;\r\n	  node1->link=temp->link;\r\n	  temp->link=node1;\r\n	  }\r\n   }\r\n }\r\n}\r\n\r\n\r\n   void del()\r\n{\r\n  node *ptr=first,*temp;\r\n  int pos,i,c=0,choice,item;\r\n  clrscr();\r\n  if(first==NULL)\r\n     printf(\"\\n\\n\\n\\t\\t\\tLIST IS EMPTY!!!\");\r\n  else\r\n    {\r\n    printf(\"\\nDELETION USING......\\n\");\r\n    printf(\"\\n 1:POSITION\");\r\n    printf(\"\\n 2:ELEMENT VALUE\");\r\n    printf(\"\\n 3:DELETE ALL\");\r\n    printf(\"\\nENTER YOUR CHOICE : \");\r\n    scanf(\"%d\",&choice);\r\n    switch(choice)\r\n    {\r\n    case 1:printf(\"\\nENTER THE POSITION : \");\r\n	   scanf(\"%d\",&pos);\r\n	   temp=first;\r\n	      while(temp!=last)\r\n	    {\r\n		temp=temp->link;\r\n		c=c+1;\r\n	    }\r\n	      c++;\r\n	      if((pos>0)&&(pos<=c))\r\n	    {\r\n		 if(pos==1)\r\n	      {\r\n		  first=first->link;\r\n		  last->link=first;\r\n		  free(ptr);\r\n	      }\r\n		else\r\n		if(pos==c)\r\n	      {\r\n		   while(ptr!=last)\r\n		 {\r\n		     temp=ptr;\r\n		     ptr=ptr->link;\r\n		 }\r\n\r\n	       temp->link=first;\r\n	       last=temp;\r\n	     }\r\n	    else\r\n	   {\r\n		for(i=1;i<=pos-2;i++)\r\n		ptr=ptr->link;\r\n		temp=ptr->link;\r\n		ptr->link=temp->link;\r\n		free(temp);\r\n	   }\r\n	 }\r\n	 else\r\n	 printf(\"\\n\\n\\n\\t\\t\\tINVALID POSITION!!!\");\r\n	 break;\r\n\r\n     case 2:printf(\"\\nENTER THE ELEMENT TO BE DELETED : \");\r\n	    scanf(\"%d\",&item);\r\n		if(item==first->data)\r\n		{\r\n		  printf(\"\\nELEMENT IS FOUND AND DELETED!!!\");\r\n		  first=first->link;\r\n		  last->link=first;\r\n		  break;\r\n		}\r\n		else\r\n		  if(item==last->data)\r\n		  {\r\n		   printf(\"\\nELEMENT IS FOUND AND DELETED!!!\");\r\n		   while(ptr->link!=last)\r\n		   ptr=ptr->link;\r\n		   last=ptr;\r\n		   ptr->link=first;\r\n		  }\r\n	      else\r\n		{\r\n		  while((ptr!=last)&&(ptr->data!=item))\r\n		  {\r\n		   temp=ptr;\r\n		   ptr=ptr->link;\r\n		  }\r\n		  if(ptr->data==item)\r\n		  {\r\n		  temp->link=ptr->link;\r\n		  printf(\"\\nELEMENT IS FOUND AND DELETED\");\r\n		  }\r\n		  else\r\n		  printf(\"\\nELEMENT NOT FOUND!!!\");\r\n		}\r\n		break;\r\n	 case 3:first=last=NULL;\r\n		break;\r\n      }\r\n  }\r\n}',1372876336),(5,'Simple Matrimony Site (C implementation) (Mini Project - Data Structures)','C','#include<stdio.h>\r\n#include<conio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\nvoid display_header();\r\nvoid welcome_screen();\r\n\r\nvoid main()\r\n{\r\n	FILE *fp,*ft;\r\n	int i=0;\r\n	char name[40],end=\'-1\';\r\n	long int pos;\r\n	struct Matrimony\r\n	{\r\n		int age;\r\n		char name[40];\r\n		char occu[40];\r\n		char rel[20];\r\n		char gen[10];\r\n		char status[20];\r\n		long int salary;\r\n	}per;\r\n\r\n	clrscr();\r\n	fp=fopen(\"Matrimony.DAT\",\"rb+\");\r\n	if(fp==NULL)\r\n	{\r\n		fp=fopen(\"Matrimony.DAT\",\"wb+\");\r\n		if(fp==NULL)\r\n		{\r\n			printf(\"\\nFile does not exist..!!\\n\");\r\n			exit(1);\r\n		}\r\n	}\r\n	welcome_screen();\r\n	while(end!=\'0\')\r\n	{       clrscr();\r\n		display_header();\r\n		printf(\"\\n\\t ___________________________________________\");\r\n		printf(\"\\n\\t|                  MENU               -  X |\");\r\n		printf(\"\\n\\t|-------------------------------------------|\");\r\n		printf(\"\\n\\t|   Choose an appropriate option            |\");\r\n		printf(\"\\n\\t|                                           |\");\r\n		printf(\"\\n\\t|   1: Add record                           |\");\r\n		printf(\"\\n\\t|   2: Display records                      |\");\r\n		printf(\"\\n\\t|   3: Search record                        |\");\r\n		printf(\"\\n\\t|   4: Edit record                          |\");\r\n		printf(\"\\n\\t|   5: Delete record                        |\");\r\n		printf(\"\\n\\t|   6: Find match                           |\");\r\n		printf(\"\\n\\t|   0:Exit                                  |\");\r\n		printf(\"\\n\\t|                                           |\");\r\n		printf(\"\\n\\t ------------------------------------------- \");\r\n		printf(\"\\n\\tEnter Your choice : \");\r\n		scanf(\"%c\",&end);\r\n\r\n		switch(end)\r\n		{\r\n			case \'1\':\r\n			{\r\n				clrscr();\r\n				display_header();\r\n				fseek(fp,0,SEEK_END);\r\n				printf(\"\\nEnter the person\'s information...\\n\");\r\n				printf(\"\\nNAME : \");\r\n				fflush(stdin);\r\n				gets(per.name);\r\n				printf(\"\\nAGE : \");\r\n				scanf(\"%d\",&per.age);\r\n				printf(\"\\nOCCUPATION : \");\r\n				fflush(stdin);\r\n				gets(per.occu);\r\n				printf(\"\\nMARITAL STATUS : \");\r\n				fflush(stdin);\r\n				gets(per.status);\r\n				printf(\"\\nGENDER : \");\r\n				fflush(stdin);\r\n				gets(per.gen);\r\n				printf(\"\\nRELIGION : \");\r\n				fflush(stdin);\r\n				gets(per.rel);\r\n				printf(\"\\nMONTHLY SALARY : \");\r\n				scanf(\"%ld\",&per.salary);\r\n				fwrite(&per,sizeof(per),1,fp);\r\n				printf(\"\\n\\n\\n\\n\\npress any key to proceed......\\n\");\r\n				getch();\r\n			}\r\n			break;\r\n			case \'2\':\r\n			{       int srno=0;\r\n				clrscr();\r\n				display_header();\r\n				printf(\"\\nNOTE: The entries displayed below contains only some information of the person\");\r\n				printf(\"\\nTo obtain entire information goto MENU -> search record -> name of the person\");\r\n				rewind(fp);\r\n				printf(\"\\n\\n\");\r\n				if(fread(&per,sizeof(per),1,fp)==1)\r\n				{ for(i=0;i<80;i++) printf(\"-\");\r\n				 printf(\"Sr.No\\tname \\t\\t\\tage \\treligion\\toccupation\\tstatus\\n\");\r\n				 for(i=0;i<80;i++) printf(\"-\");\r\n				}\r\n				else\r\n				printf(\"\\n\\tNOTHING TO DISPLAY!!!\");\r\n				rewind(fp);\r\n				while(fread(&per,sizeof(per),1,fp)==1)\r\n				printf(\"%d \\t%s \\t%d \\t%s\\t\\t%s\\t\\t%s\\n\",++srno,per.name,per.age,per.rel,per.occu,per.status);\r\n				printf(\"\\n\\n\\n\\npress any key to proceed......\\n\");\r\n				getch();\r\n			}\r\n			break;\r\n			case \'3\':\r\n			{\r\n				int flag=0,k=0;\r\n				clrscr();\r\n				display_header();\r\n				rewind(fp);\r\n				printf(\"\\nEnter the name to be searched : \");\r\n				fflush(stdin);\r\n				gets(name);\r\n				while(fread(&per,sizeof(per),1,fp)==1)\r\n				{\r\n					if(!strcmp(name,per.name))\r\n					{\r\n						if(k==0)\r\n						printf(\"\\nThe search results are......\\n\");\r\n						printf(\"\\n\");\r\n						printf(\"\\n -------  NAME           : %s\",per.name);\r\n						printf(\"\\n|       | AGE            : %d\",per.age);\r\n						printf(\"\\n| Photo | GENDER         : %s\",per.gen);\r\n						printf(\"\\n|       | RELIGION       : %s\",per.rel);\r\n						printf(\"\\n -------  MARITAL STATUS : %s\",per.status);\r\n						printf(\"\\n\\t  OCCUPATION     : %s\",per.occu);\r\n						printf(\"\\n\\t  MONTHLY SALARY : %ld\",per.salary);\r\n						flag=1;   k++;\r\n					}\r\n\r\n				}\r\n				if(flag==0)\r\n				printf(\"\\nNO RESULTS FOUND...!!\");\r\n				printf(\"\\n\\n\\npress any key to proceed......\\n\");\r\n				getch();\r\n			}\r\n			break;\r\n			case \'4\':\r\n			{\r\n				int i=0,flag=0;\r\n				clrscr();\r\n				display_header();\r\n				rewind(fp);\r\n				printf(\"\\nEnter the name to edit: \\n\");\r\n				fflush(stdin);\r\n				gets(name);\r\n				while(fread(&per,sizeof(per),1,fp)==1)\r\n				{\r\n					if(!strcmp(name,per.name))\r\n					{\r\n						printf(\"\\nNAME : \");\r\n						fflush(stdin);\r\n						gets(per.name);\r\n						printf(\"\\nAGE : \");\r\n						scanf(\"%d\",&per.age);\r\n						printf(\"\\nOCCUPATION : \");\r\n						fflush(stdin);\r\n						gets(per.occu);\r\n						printf(\"\\nMARITAL STATUS : \");\r\n						fflush(stdin);\r\n						gets(per.status);\r\n						printf(\"\\nGENDER : \");\r\n						fflush(stdin);\r\n						gets(per.gen);\r\n						printf(\"\\nRELIGION : \");\r\n						fflush(stdin);\r\n						gets(per.rel);\r\n						printf(\"\\nMONTHLY SALARY : \");\r\n						scanf(\"%ld\",&per.salary);\r\n						flag=1;\r\n						fseek(fp,sizeof(per)*i,SEEK_SET);\r\n						fwrite(&per,sizeof(per),1,fp);\r\n						break;\r\n\r\n					}\r\n					i++;\r\n				}\r\n				if(flag==0)\r\n				printf(\"\\nNO RECORD FOUND!!!\");\r\n				printf(\"\\n\\n\\n\\n\\npress any key to proceed......\\n\");\r\n				getch();\r\n			}\r\n			break;\r\n			case \'5\':\r\n			{\r\n				int flag=0;\r\n				clrscr();\r\n				display_header();\r\n				printf(\"\\nEnter the name whose entry is to be deleted: \\n\");\r\n				fflush(stdin);\r\n				gets(name);\r\n				ft=fopen(\"Temp.DAT\",\"wb\");\r\n				rewind(fp);\r\n				while(fread(&per,sizeof(per),1,fp)==1)\r\n				{\r\n					if(strcmp(name,per.name)==0)\r\n					flag=1;\r\n					else\r\n					fwrite(&per,sizeof(per),1,ft);\r\n\r\n				}\r\n				fclose(fp);\r\n				fclose(ft);\r\n				remove(\"Matrimony.DAT\");\r\n				rename(\"Temp.DAT\",\"Matrimony.DAT\");\r\n				fp=fopen(\"Matrimony.DAT\",\"rb+\");\r\n				if(flag==1)\r\n				printf(\"\\nSuccesfully deleted..!!\\n\");\r\n				if(flag==0)\r\n				printf(\"\\n\\tSORRY!!!\\nNO ENTRY FOUND!!!\");\r\n				printf(\"\\n\\n\\n\\n\\npress any key to proceed......\\n\");\r\n				getch();\r\n			}\r\n			break;\r\n			case \'6\': {\r\n				int  choice;\r\n				clrscr();\r\n				display_header();\r\n				printf(\"\\nMatch on the basis of...\");\r\n				printf(\"\\n 1 : Age\");\r\n				printf(\"\\n 2 : Religion\");\r\n				printf(\"\\n 3 : Marital Status \");\r\n				printf(\"\\n\\nEnter your choice : \");\r\n				scanf(\"%d\",&choice);\r\n				 switch(choice)\r\n				{\r\n				case 1: { int min,max,k=0,flag=0;\r\n					rewind(fp);\r\n					printf(\"\\nEnter the min and max ages to find the match : \");\r\n					scanf(\"%d %d\",&min,&max);\r\n					while(fread(&per,sizeof(per),1,fp)==1)\r\n					{\r\n					if((per.age>=min)&&(per.age<=max))\r\n					{\r\n						if(k==0)\r\n						printf(\"\\nThe search results are......\\n\");\r\n						printf(\"\\n\");\r\n						printf(\"\\n -------  NAME           : %s\",per.name);\r\n						printf(\"\\n|       | AGE            : %d\",per.age);\r\n						printf(\"\\n| Photo | GENDER         : %s\",per.gen);\r\n						printf(\"\\n|       | RELIGION       : %s\",per.rel);\r\n						printf(\"\\n -------  MARITAL STATUS : %s\",per.status);\r\n						printf(\"\\n\\t  OCCUPATION     : %s\",per.occu);\r\n						printf(\"\\n\\t  MONTHLY SALARY : %ld\",per.salary);\r\n						flag=1;   k++;\r\n					}\r\n\r\n					}\r\n					if(flag==0)\r\n					printf(\"\\nNO RESULTS FOUND...!!\");\r\n					printf(\"\\n\\n\\npress any key to proceed......\\n\");\r\n					getch();\r\n				     }\r\n				     break;\r\n				case 2:{ int flag=0,k=0;\r\n					 char religion[20];\r\n					rewind(fp);\r\n					printf(\"\\nEnter the Religion to find the match : \");\r\n					fflush(stdin);\r\n					gets(religion);\r\n					while(fread(&per,sizeof(per),1,fp)==1)\r\n					{\r\n					if(!strcmp(religion,per.rel))\r\n					{\r\n						if(k==0)\r\n						printf(\"\\nThe search results are......\\n\");\r\n						printf(\"\\n\");\r\n						printf(\"\\n -------  NAME           : %s\",per.name);\r\n						printf(\"\\n|       | AGE            : %d\",per.age);\r\n						printf(\"\\n| Photo | GENDER         : %s\",per.gen);\r\n						printf(\"\\n|       | RELIGION       : %s\",per.rel);\r\n						printf(\"\\n -------  MARITAL STATUS : %s\",per.status);\r\n						printf(\"\\n\\t  OCCUPATION     : %s\",per.occu);\r\n						printf(\"\\n\\t  MONTHLY SALARY : %ld\",per.salary);\r\n						flag=1;   k++;\r\n					}\r\n\r\n					}\r\n					if(flag==0)\r\n					printf(\"\\nNO RESULTS FOUND...!!\");\r\n					printf(\"\\n\\n\\npress any key to proceed......\\n\");\r\n					getch();\r\n				    }\r\n				    break;\r\n				case 3:{\r\n					  int flag=0,k=0;\r\n					 char tempstatus[20];\r\n					rewind(fp);\r\n					printf(\"\\nEnter the Status to find the match : \");\r\n					fflush(stdin);\r\n					gets(tempstatus);\r\n					while(fread(&per,sizeof(per),1,fp)==1)\r\n					{\r\n					if(!strcmp(tempstatus,per.status))\r\n					{\r\n						if(k==0)\r\n						printf(\"\\nThe search results are......\\n\");\r\n						printf(\"\\n\");\r\n						printf(\"\\n -------  NAME           : %s\",per.name);\r\n						printf(\"\\n|       | AGE            : %d\",per.age);\r\n						printf(\"\\n| Photo | GENDER         : %s\",per.gen);\r\n						printf(\"\\n|       | RELIGION       : %s\",per.rel);\r\n						printf(\"\\n -------  MARITAL STATUS : %s\",per.status);\r\n						printf(\"\\n\\t  OCCUPATION     : %s\",per.occu);\r\n						printf(\"\\n\\t  MONTHLY SALARY : %ld\",per.salary);\r\n						flag=1;   k++;\r\n					}\r\n\r\n					}\r\n					if(flag==0)\r\n					printf(\"\\nNO RESULTS FOUND...!!\");\r\n					printf(\"\\n\\n\\npress any key to proceed......\\n\");\r\n					getch();\r\n				    }\r\n				 default:printf(\"\\nINVALID!!!\");\r\n					getch();\r\n				 }\r\n			       }\r\n				break;\r\n			case \'0\':break;\r\n			default:printf(\"\\nINVALID INPUT!!!\");\r\n				getch();\r\n				fflush(stdin);\r\n				break;\r\n\r\n		}\r\n\r\n	}\r\n	fclose(fp);\r\n}\r\n\r\nvoid display_header()\r\n{\r\nint i;\r\nfor(i=0;i<80;i++)\r\nprintf(\"*\");\r\nprintf(\"\\n\\t\\t\\tINDIAN MATRIMONIALS - We match better\\n\\n\");\r\nfor(i=0;i<80;i++)\r\nprintf(\"*\");\r\n}\r\n\r\nvoid welcome_screen()\r\n{\r\nint i,j;\r\nclrscr();\r\nprintf(\"\\n\\n\");\r\n  for(i=0;i<79;i++)\r\n  printf(\"-\");\r\n  for(i=0;i<3;i++)\r\n  {\r\n    printf(\"\\n|\");\r\n    for(j=0;j<77;j++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n  }\r\n  printf(\"\\n|\\t\\t\\t       WELCOME TO\");\r\n   for(i=0;i<37;i++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n    for(i=0;i<3;i++)\r\n    {\r\n    printf(\"\\n|\");\r\n    for(j=0;j<77;j++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n    }\r\n    printf(\"\\n|\\t\\t\\t  INDIAN MATRIMONIALS\");\r\n   for(i=0;i<33;i++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n    printf(\"\\n|\\t\\t\\t  -------------------\");\r\n   for(i=0;i<33;i++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n    printf(\"\\n|\\t\\t\\t\\t     -We match better...\");\r\n   for(i=0;i<22;i++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n\r\n  for(i=0;i<5;i++)\r\n  { printf(\"\\n|\");\r\n    for(j=0;j<77;j++)\r\n    printf(\" \");\r\n    printf(\"|\");\r\n  }\r\n  printf(\"\\n\");\r\n  for(i=0;i<79;i++)\r\n  printf(\"-\");\r\n  printf(\"\\n\\n\\n\\npress any key to enter.....\");\r\n  getch();\r\n}',1372876464),(6,'Fiboncci Series','C++','#include<iostream.h>\r\n#include<conio.h>\r\n\r\nclass fibo\r\n{\r\nprivate: int n;\r\npublic:void input();\r\n       void series();\r\n};\r\n\r\nvoid fibo::input()\r\n{\r\ncout<<\"ENTER THE NUMBER OF TERMS \";\r\ncin>>n;\r\n}\r\n\r\nvoid fibo::series()\r\n{\r\n int f1=0,f2=1,f3,i;\r\n if(n<=0)\r\n cout<<\"INVALID!!!\";\r\n if(n==1)\r\n cout<<f1;\r\n if(n>=2)\r\n {\r\n   cout<<f1<<\" \"<<f2;\r\n   for(i=3;i<=n;i++)\r\n  {\r\n    f3=f1+f2;\r\n    f1=f2;\r\n    f2=f3;\r\n    cout<<\" \"<<f3;\r\n  }\r\n }\r\n}\r\n\r\nvoid main()\r\n{\r\nclrscr();\r\nfibo z;\r\nz.input();\r\nz.series();\r\ngetch();\r\n}',1372876494),(7,'Conversion from Infix to Postfix','C','#include <stdio.h>\r\n#include <conio.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n\r\n#define MAX 50\r\n\r\nstruct infix\r\n{\r\n	char target[MAX] ;\r\n	char stack[MAX] ;\r\n	char *s, *t ;\r\n	int top ;\r\n} ;\r\n\r\nvoid initinfix ( struct infix * ) ;\r\nvoid setexpr ( struct infix *, char * ) ;\r\nvoid push ( struct infix *, char ) ;\r\nchar pop ( struct infix * ) ;\r\nvoid convert ( struct infix * ) ;\r\nint priority ( char ) ;\r\nvoid show ( struct infix ) ;\r\n\r\nvoid main( )\r\n{\r\n    struct infix p ;\r\n	char expr[MAX] ;\r\n\r\n    initinfix ( &p ) ;\r\n\r\n  \r\n\r\n    printf ( \"\\nEnter an expression in infix form: \" ) ;\r\n	gets ( expr ) ;\r\n\r\n	setexpr ( &p, expr ) ;\r\n	convert ( &p ) ;\r\n\r\n	printf ( \"\\nThe postfix expression is: \" ) ;\r\n	show ( p ) ;\r\n\r\n    getch( ) ;\r\n}\r\n\r\n/* initializes structure elements */\r\nvoid initinfix ( struct infix *p )\r\n{\r\n	p -> top = -1 ;\r\n	strcpy ( p -> target, \"\" ) ;\r\n	strcpy ( p -> stack, \"\" ) ;\r\n	p -> t = p -> target ;\r\n	p -> s = \"\"  ;\r\n}\r\n\r\n/* sets s to point to given expr. */\r\nvoid setexpr ( struct infix *p, char *str )\r\n{\r\n	p -> s = str ;\r\n}\r\n\r\n/* adds an operator to the stack */\r\nvoid push ( struct infix *p, char c )\r\n{\r\n	if ( p -> top == MAX )\r\n		printf ( \"\\nStack is full.\\n\" ) ;\r\n	else\r\n	{\r\n		p -> top++ ;\r\n		p -> stack[p -> top] = c ;\r\n	}\r\n}\r\n\r\n/* pops an operator from the stack */\r\nchar pop ( struct infix *p )\r\n{\r\n	if ( p -> top == -1 )\r\n	{\r\n		printf ( \"\\nStack is empty.\\n\" ) ;\r\n		return -1 ;\r\n	}\r\n	else\r\n	{\r\n		char item = p -> stack[p -> top] ;\r\n		p -> top-- ;\r\n		return item ;\r\n	}\r\n}\r\n\r\n/* converts the given expr. from infix to postfix form */\r\nvoid convert ( struct infix *p )\r\n{\r\n    char opr ;\r\n\r\n	while ( *( p -> s ) )\r\n	{\r\n		if ( *( p -> s ) == \' \' || *( p -> s ) == \'\\t\' )\r\n		{\r\n			p -> s++ ;\r\n			continue ;\r\n		}\r\n		if ( isdigit ( *( p -> s ) ) || isalpha ( *( p -> s ) ) )\r\n		{\r\n			while ( isdigit ( *( p -> s ) ) || isalpha ( *( p -> s ) ) )\r\n			{\r\n				*( p -> t ) = *( p -> s ) ;\r\n				p -> s++ ;\r\n				p -> t++ ;\r\n			}\r\n		}\r\n		if ( *( p -> s ) == \'(\' )\r\n		{\r\n			push ( p, *( p -> s ) ) ;\r\n			p -> s++ ;\r\n		}\r\n\r\n		if ( *( p -> s ) == \'*\' || *( p -> s ) == \'+\' || *( p -> s ) == \'/\' || *( p -> s ) == \'%\' || *( p -> s ) == \'-\' || *( p -> s ) == \'$\' )\r\n		{\r\n			if ( p -> top != -1 )\r\n			{\r\n				opr = pop ( p ) ;\r\n				while ( priority ( opr ) >= priority ( *( p -> s ) ) )\r\n				{\r\n					*( p -> t ) = opr ;\r\n					p -> t++ ;\r\n					opr = pop ( p ) ;\r\n				}\r\n				push ( p, opr ) ;\r\n				push ( p, *( p -> s ) ) ;\r\n			}\r\n			else\r\n				push ( p, *( p -> s ) ) ;\r\n			p -> s++ ;\r\n		}\r\n\r\n		if ( *( p -> s ) == \')\' )\r\n		{\r\n			opr = pop ( p ) ;\r\n			while ( ( opr ) != \'(\' )\r\n			{\r\n				*( p -> t ) = opr ;\r\n				p -> t++ ;\r\n				opr =  pop ( p ) ;\r\n			}\r\n			p -> s++ ;\r\n		}\r\n	}\r\n\r\n	while ( p -> top != -1 )\r\n	{\r\n		char opr = pop ( p ) ;\r\n		*( p -> t ) = opr ;\r\n		p -> t++ ;\r\n	}\r\n\r\n	*( p -> t ) = \'\\0\' ;\r\n}\r\n\r\n/* returns the priority of an operator */\r\nint priority ( char c )\r\n{\r\n	if ( c == \'$\' )\r\n		return 3 ;\r\n	if ( c == \'*\' || c == \'/\' || c == \'%\' )\r\n		return 2 ;\r\n	else\r\n	{\r\n		if ( c == \'+\' || c == \'-\' )\r\n			return 1 ;\r\n		else\r\n			return 0 ;\r\n	}\r\n}\r\n\r\n/* displays the postfix form of given expr. */\r\nvoid show ( struct infix p )\r\n{\r\n    printf ( \" %s\", p.target ) ;\r\n}',1372876534),(8,'8 Puzzle (Breadth first Search)','C','#include<stdio.h>\r\n#include<conio.h>\r\n#include<malloc.h>\r\n#include<stdlib.h>\r\nint initial[9]={2,8,3,1,6,4,7,0,5};    //the initial and final states\r\nint final[9]={1,2,3,8,0,4,7,6,5};      //r from ai(kevin knight) textbk...\r\n									   //pg no 38\r\nint moves[9][4]={                      //if u want 2 change plz enter valid\r\n		{1,3,-1,-1},                   //states\r\n		{0,2,4,-1},\r\n		{1,5,-1,-1},\r\n		{4,0,6,-1},\r\n		{3,1,5,7},\r\n		{2,4,8,-1},\r\n		{3,7,-1,-1},\r\n		{4,6,8,-1},\r\n		{5,7,-1,-1}\r\n	  };\r\nstruct qtype  //queue\r\n{\r\n	int board[9];\r\n	struct qtype *next;\r\n	struct qtype *parent;\r\n}*print;\r\n\r\nstruct node  //linked_list\r\n{\r\n	   int check[9];\r\n	   struct node *next;\r\n}*list,*p;\r\n\r\ntypedef struct qtype QUEUE;\r\ntypedef struct node NODE;\r\n\r\nQUEUE *rear=NULL,*tfront=NULL;\r\n\r\n		 int qempty()\r\n		 { return tfront==NULL; }\r\n\r\nvoid qinsert(int *m)\r\n{\r\n	int i;\r\n	QUEUE *newnode;\r\n	newnode=(QUEUE *)malloc(sizeof(QUEUE));\r\n	for(i=0;i<9;i++)\r\n		newnode->board[i]=m[i];\r\n	newnode->parent=tfront; //parent\r\n	if(rear==NULL)\r\n	  rear=tfront=newnode;\r\n	else\r\n	  {\r\n	  rear->next=newnode;\r\n	  rear=newnode;\r\n	  }\r\n}\r\n\r\nNODE * getnode(int *m)\r\n{\r\n	 NODE *tempnode;\r\n	 int i;\r\n	 tempnode=(NODE *)malloc(sizeof(NODE));\r\n	 tempnode->next=NULL;\r\n	 for(i=0;i<9;i++)\r\n	tempnode->check[i]=m[i];\r\n	 return tempnode;\r\n}\r\n\r\nvoid ins_in2_list(int *m)\r\n{\r\n\r\n	NODE *aux;\r\n	int i;\r\n	aux=getnode(m);\r\n	if(list==NULL)\r\n	   list=aux;\r\n\r\n	else\r\n	  {\r\n	aux->next=list;\r\n	list=aux;\r\n	  }\r\n}\r\n			   int dublicate(int *m)\r\n			   {\r\n				   NODE *temp=list;\r\n				   int i;\r\n				   while(temp!=NULL)\r\n				   {\r\n				   for(i=0;i<9;i++)\r\n					   {	  if(temp->check[i]!=m[i])\r\n					  break;\r\n					   }\r\n					  if(i==9)\r\n					 return 1;\r\n					  temp=temp->next;\r\n				   }\r\n				   return 0;\r\n			   }\r\n\r\n\r\n\r\nvoid print_soln()\r\n{\r\n	int i;\r\n	while(p!=NULL)\r\n	{\r\n	   for(i=0;i<9;i++)\r\n	   {\r\n	   printf(\"%d\\t\",p->check[i]);\r\n	   if((i+1)%3==0)\r\n	   printf(\"\\n\");\r\n	   }\r\n	   printf(\"\\n\\n\");\r\n	   getch();\r\n	   p=p->next;\r\n	}\r\n}\r\n\r\nvoid bfs()\r\n{\r\n   int i,j,t[9],v,k,l,c=0;\r\n   NODE *aux;\r\n   p=NULL;\r\n   qinsert(initial);\r\n   ins_in2_list(initial);\r\n\r\n   while(!qempty())\r\n   {\r\n\r\n	   for(i=0;i<9;i++)\r\n	   if(tfront->board[i]==0)\r\n		  break;\r\n		  j=0;\r\n	   while(moves[i][j]>=0&&j<=3)\r\n	  {\r\n		  for(k=0;k<9;k++)\r\n		  t[k]=tfront->board[k];\r\n		  v=t[i];\r\n		  t[i]=t[moves[i][j]];\r\n		  t[moves[i][j]]=v;\r\n\r\n		  if(!dublicate(t))\r\n		   {\r\n\r\n		   qinsert(t);\r\n			   ins_in2_list(t);\r\n			   for(l=0;l<9;l++)\r\n			   if(final[l]!=t[l])\r\n			  break;\r\n			   if(l==9)\r\n			   {\r\n			  printf(\"soln found...\\n\");\r\n			  print=rear;\r\n			  while(print!=NULL)\r\n			  {\r\n				 aux=getnode(print->board);\r\n				 if(p==NULL)\r\n				   p=aux;\r\n				 else\r\n				 {\r\n				   aux->next=p;\r\n				   p=aux;\r\n				 }\r\n				 print=print->parent;\r\n			  }\r\n			  print_soln();\r\n			  exit(1);\r\n			   }\r\n			}\r\n			j++;\r\n	   }\r\n	  tfront=tfront->next;\r\n   }\r\n\r\n\r\n}\r\n\r\nvoid main()\r\n{\r\n	 int i,j;\r\n	 list=NULL;\r\n	 //clrscr();\r\n	 printf(\"initial state\\n\");\r\n	  for(i=0;i<9;i++)\r\n	   {\r\n	   printf(\"%d\\t\",initial[i]);\r\n	   if((i+1)%3==0)\r\n	   printf(\"\\n\");\r\n	   }\r\n	   printf(\"\\n\\n\");\r\n	printf(\"final state\\n\");\r\n	 for(i=0;i<9;i++)\r\n	   {\r\n	   printf(\"%d\\t\",final[i]);\r\n	   if((i+1)%3==0)\r\n	   printf(\"\\n\");\r\n	   }\r\n	   printf(\"\\n\\n\");\r\n	\r\n	/* for(i=0;i<9;i++)\r\n		scanf(\"%d\",&initial[i]);*/\r\n  //	 printf(\"Enter final state\\n\");\r\n   //	 for(i=0;i<9;i++)\r\n	 //	scanf(\"%d\",&final[i]);\r\n\r\n	 bfs();\r\n\r\n\r\n	 getch();\r\n}',1372876579),(9,'Ruby Script to find the remainder without using in-built methods.','Ruby','def FindRemainder(numerator,denominator)\r\n	if denominator > numerator\r\n		puts \"#{numerator}\"\r\n	else\r\n		result = denominator\r\n		i = 1\r\n		while ((denominator*i)<=numerator)\r\n			result = denominator*i\r\n			i = i + 1	\r\n		end\r\n		puts \"#{numerator-result}\"\r\n	end\r\nend\r\n\r\nFindRemainder(37,27)',1372876602),(10,'To get Autocomplete suggestions using Google maps Autocomplete API','Ruby','require \"net/http\"\r\nrequire \"json\"\r\n\r\ndef autocomplete(keyword)\r\n	keyword=keyword.gsub(\' \',\'%20\')\r\n	uri = URI(\"https://maps.googleapis.com/maps/api/place/autocomplete/json?input=#{keyword}+in+india&types=establishment&sensor=false&key=AIzaSyAGeap2PXa_AS19npQLjDlUbE8w0t_atwE\")\r\n	response = Net::HTTP.get_response(uri)\r\n\r\n	result = JSON.parse(response.body)\r\n\r\n	  # puts result\r\n\r\n	descriptions = result[\"predictions\"]\r\n	descriptions.each do |description|\r\n		puts description[\"description\"]\r\n	end\r\nend\r\n\r\nautocomplete(\"taj\")',1372876626),(11,'Distance and Duration calculation using Google Maps Distance Matrix API','Ruby','# To get distance and duration between 2 places using Google Maps Distance Matrix API\r\nrequire \"net/http\"\r\nrequire \"json\"\r\n\r\ndef find_distance(lat1,long1,lat2,long2)\r\n	# keyword=keyword.gsub(\' \',\'%20\')\r\n	uri = URI(\"http://maps.googleapis.com/maps/api/distancematrix/json?origins=#{lat1},#{long1}&destinations=#{lat2},#{long2}&mode=driving&sensor=false\")\r\n	response = Net::HTTP.get_response(uri)\r\n\r\n	distancematrix = JSON.parse(response.body)\r\n\r\n	#puts distancematrix\r\n	puts \"Origin Address: #{distancematrix[\"origin_addresses\"]}\"\r\n	puts \"Destination Address: #{distancematrix[\"destination_addresses\"]}\"\r\n\r\n	rows=distancematrix[\"rows\"]\r\n\r\n	rows.each do |row|\r\n		elements = row[\"elements\"]\r\n			puts elements.class\r\n			elements.each do |element|\r\n				puts \"Distance(km): #{element[\"distance\"][\"text\"]}\"\r\n				puts \"Distance(value): #{element[\"distance\"][\"value\"]}\"\r\n				puts \"Duration(text): #{element[\"duration\"][\"text\"]}\"\r\n				puts \"Duration(value): #{element[\"duration\"][\"value\"]}\"\r\n			end\r\n	end\r\nend\r\n\r\nfind_distance(27.17,78.04,27.19,78.03)',1372876652),(12,'Finding Square root','Ruby','def squareroot(a,guess)\r\n	x=guess\r\n	#value=x*x;\r\n\r\n	while (1)\r\n		x1=(x.to_f + (a.to_f/x.to_f))/2\r\n		value= x1**2\r\n		x=x1\r\n		if ((value-a)<=0.001)\r\n			break\r\n		end\r\n	end\r\n\r\n	puts \"#{x1}\"\r\nend\r\n\r\nz=squareroot(5,2)',1372876669),(13,'Finding similar places using Google Maps Places API','Ruby','require \"net/http\"\r\nrequire \"json\"\r\n\r\ndef Findplaces(keyword)\r\n	keyword=keyword.gsub(\' \',\'%20\')\r\n	uri = URI(\"https://maps.googleapis.com/maps/api/place/textsearch/json?query=#{keyword}&name=goa&sensor=false&key=AIzaSyAGeap2PXa_AS19npQLjDlUbE8w0t_atwE\")\r\n	response = Net::HTTP.get_response(uri)\r\n\r\n	result = JSON.parse(response.body)\r\n	#puts result.inspect\r\n	results_value=result[\"results\"]\r\n	#puts results_value.inspect\r\n\r\n	similar_places=[]\r\n\r\n	results_value.each do |result|\r\n		similar_places.push(\"name\"=>result[\"name\"],\"address\"=>result[\"formatted_address\"],\"latitude\"=>result[\"geometry\"][\"location\"][\"lat\"],\"longitude\"=>result[\"geometry\"][\"location\"][\"lng\"])\r\n	end\r\n	return similar_places\r\nend\r\n\r\nsimilar_places = Findplaces(\"Taj\")\r\nputs similar_places.inspect',1372876691);
/*!40000 ALTER TABLE `programs` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-07-04  0:24:47
